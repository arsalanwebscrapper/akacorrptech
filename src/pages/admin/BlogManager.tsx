
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useBlogData, useBlogMutations, useRealtimeBlogData, BlogPost } from '@/hooks/useBlogData';
import {
  FaPlus,
  FaEdit,
  FaTrash,
  FaEye,
  FaEyeSlash,
  FaSave,
  FaTimes,
  FaArrowLeft
} from 'react-icons/fa';

const BlogManager = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [tagInput, setTagInput] = useState('');
  const [keywordInput, setKeywordInput] = useState('');
  
  const navigate = useNavigate();
  const { toast } = useToast();
  const { posts, isLoading: postsLoading } = useBlogData();
  const { createBlog, updateBlog, deleteBlog } = useBlogMutations();
  
  useRealtimeBlogData(); // Enable real-time updates

  // Check authentication
  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        navigate('/auth');
        return;
      }
      
      setIsAuthenticated(true);
      setIsLoading(false);
    };

    checkAuth();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (!session) {
        navigate('/auth');
      } else {
        setIsAuthenticated(true);
        setIsLoading(false);
      }
    });

    return () => subscription.unsubscribe();
  }, [navigate]);

  const initializeNewPost = (): BlogPost => ({
    id: '', // Will be generated by database
    title: '',
    excerpt: '',
    content: '',
    author: 'Admin',
    category: '',
    tags: [],
    status: 'draft',
    featured: false,
    image_url: '',
    seo_title: '',
    seo_description: '',
    seo_keywords: [],
    published_at: null,
    updated_at: null
  });

  const handleCreateNew = () => {
    setEditingPost(initializeNewPost());
    setIsCreating(true);
    setTagInput('');
    setKeywordInput('');
  };

  const handleEdit = (post: BlogPost) => {
    setEditingPost(post);
    setIsCreating(false);
    setTagInput(post.tags?.join(', ') || '');
    setKeywordInput(post.seo_keywords?.join(', ') || '');
  };

  const handleSave = async () => {
    if (!editingPost) return;

    try {
      const baseData = {
        title: editingPost.title,
        excerpt: editingPost.excerpt || null,
        content: editingPost.content || null,
        author: editingPost.author,
        category: editingPost.category || null,
        tags: tagInput.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),
        status: editingPost.status || null,
        featured: editingPost.featured || null,
        image_url: editingPost.image_url || null,
        seo_title: editingPost.seo_title || null,
        seo_description: editingPost.seo_description || null,
        seo_keywords: keywordInput.split(',').map(keyword => keyword.trim()).filter(keyword => keyword.length > 0),
      };

      if (isCreating) {
        await createBlog.mutateAsync(baseData);
        toast({
          title: "Success!",
          description: "Blog post created successfully.",
        });
      } else {
        if (!editingPost.id) {
          throw new Error('Post ID is required for updates');
        }
        await updateBlog.mutateAsync({ ...baseData, id: editingPost.id });
        toast({
          title: "Success!",
          description: "Blog post updated successfully.",
        });
      }

      setEditingPost(null);
      setIsCreating(false);
      setTagInput('');
      setKeywordInput('');
    } catch (error) {
      console.error('Error saving post:', error);
      toast({
        title: "Error",
        description: "Failed to save blog post. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this blog post?')) {
      try {
        await deleteBlog.mutateAsync(id);
        toast({
          title: "Success!",
          description: "Blog post deleted successfully.",
        });
      } catch (error) {
        console.error('Error deleting post:', error);
        toast({
          title: "Error",
          description: "Failed to delete blog post. Please try again.",
          variant: "destructive",
        });
      }
    }
  };

  const handleCancel = () => {
    setEditingPost(null);
    setIsCreating(false);
    setTagInput('');
    setKeywordInput('');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-accent mx-auto mb-4"></div>
          <p className="text-muted-foreground">Verifying authentication...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null; // Will redirect to auth page
  }

  return (
    <div className="min-h-screen bg-gradient-subtle">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => navigate('/admin/dashboard')}
            >
              <FaArrowLeft className="mr-2" />
              Back to Dashboard
            </Button>
            <div>
              <h1 className="font-montserrat font-bold text-3xl text-primary">
                Blog Manager
              </h1>
              <p className="text-muted-foreground font-raleway">
                Create, edit, and manage your blog posts
              </p>
            </div>
          </div>
          
          <Button
            onClick={handleCreateNew}
            className="bg-accent hover:bg-accent-light"
            disabled={editingPost !== null}
          >
            <FaPlus className="mr-2" />
            New Post
          </Button>
        </div>

        {/* Editor */}
        {editingPost && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>{isCreating ? 'Create New Post' : 'Edit Post'}</span>
                <div className="flex space-x-2">
                  <Button onClick={handleSave} size="sm">
                    <FaSave className="mr-2" />
                    Save
                  </Button>
                  <Button onClick={handleCancel} variant="outline" size="sm">
                    <FaTimes className="mr-2" />
                    Cancel
                  </Button>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="title">Title</Label>
                    <Input
                      id="title"
                      value={editingPost.title}
                      onChange={(e) => setEditingPost({...editingPost, title: e.target.value})}
                      placeholder="Enter post title"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="excerpt">Excerpt</Label>
                    <Textarea
                      id="excerpt"
                      value={editingPost.excerpt || ''}
                      onChange={(e) => setEditingPost({...editingPost, excerpt: e.target.value})}
                      placeholder="Brief description of the post"
                      rows={3}
                    />
                  </div>

                  <div>
                    <Label htmlFor="category">Category</Label>
                    <Input
                      id="category"
                      value={editingPost.category || ''}
                      onChange={(e) => setEditingPost({...editingPost, category: e.target.value})}
                      placeholder="e.g., Technology, Web Development"
                    />
                  </div>

                  <div>
                    <Label htmlFor="tags">Tags (comma-separated)</Label>
                    <Input
                      id="tags"
                      value={tagInput}
                      onChange={(e) => setTagInput(e.target.value)}
                      placeholder="react, javascript, web development"
                    />
                  </div>

                  <div>
                    <Label htmlFor="image_url">Featured Image URL</Label>
                    <Input
                      id="image_url"
                      value={editingPost.image_url || ''}
                      onChange={(e) => setEditingPost({...editingPost, image_url: e.target.value})}
                      placeholder="https://example.com/image.jpg"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={editingPost.status === 'published'}
                        onCheckedChange={(checked) => 
                          setEditingPost({...editingPost, status: checked ? 'published' : 'draft'})
                        }
                      />
                      <Label>Published</Label>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={editingPost.featured || false}
                        onCheckedChange={(checked) => 
                          setEditingPost({...editingPost, featured: checked})
                        }
                      />
                      <Label>Featured</Label>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="author">Author</Label>
                    <Input
                      id="author"
                      value={editingPost.author}
                      onChange={(e) => setEditingPost({...editingPost, author: e.target.value})}
                      placeholder="Author name"
                    />
                  </div>

                  <div>
                    <Label htmlFor="seo_title">SEO Title</Label>
                    <Input
                      id="seo_title"
                      value={editingPost.seo_title || ''}
                      onChange={(e) => setEditingPost({...editingPost, seo_title: e.target.value})}
                      placeholder="SEO optimized title"
                    />
                  </div>

                  <div>
                    <Label htmlFor="seo_description">SEO Description</Label>
                    <Textarea
                      id="seo_description"
                      value={editingPost.seo_description || ''}
                      onChange={(e) => setEditingPost({...editingPost, seo_description: e.target.value})}
                      placeholder="SEO meta description"
                      rows={3}
                    />
                  </div>

                  <div>
                    <Label htmlFor="seo_keywords">SEO Keywords (comma-separated)</Label>
                    <Input
                      id="seo_keywords"
                      value={keywordInput}
                      onChange={(e) => setKeywordInput(e.target.value)}
                      placeholder="seo, keywords, here"
                    />
                  </div>
                </div>
              </div>

              <div>
                <Label htmlFor="content">Content</Label>
                <Textarea
                  id="content"
                  value={editingPost.content || ''}
                  onChange={(e) => setEditingPost({...editingPost, content: e.target.value})}
                  placeholder="Write your blog post content here..."
                  rows={15}
                  className="font-mono"
                />
              </div>
            </CardContent>
          </Card>
        )}

        {/* Posts List */}
        <Card>
          <CardHeader>
            <CardTitle>All Blog Posts</CardTitle>
            <CardDescription>
              Manage your existing blog posts
            </CardDescription>
          </CardHeader>
          <CardContent>
            {postsLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent"></div>
              </div>
            ) : posts.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-muted-foreground mb-4">No blog posts found.</p>
                <Button onClick={handleCreateNew}>
                  <FaPlus className="mr-2" />
                  Create Your First Post
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {posts.map((post) => (
                  <div key={post.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="font-semibold text-lg">{post.title}</h3>
                        <Badge variant={post.status === 'published' ? 'default' : 'secondary'}>
                          {post.status}
                        </Badge>
                        {post.featured && (
                          <Badge variant="outline">Featured</Badge>
                        )}
                      </div>
                      <p className="text-muted-foreground text-sm mb-2">{post.excerpt}</p>
                      <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                        <span>By {post.author}</span>
                        <span>•</span>
                        <span>{post.category}</span>
                        {post.updated_at && (
                          <>
                            <span>•</span>
                            <span>Updated {new Date(post.updated_at).toLocaleDateString()}</span>
                          </>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleEdit(post)}
                        disabled={editingPost !== null}
                      >
                        <FaEdit className="mr-2" />
                        Edit
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleDelete(post.id)}
                        disabled={editingPost !== null}
                      >
                        <FaTrash className="mr-2" />
                        Delete
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default BlogManager;
